`timescale 1ns / 1ns // `timescale time_unit/time_precision

module lab4part3(SW,LEDR,KEY);
input [9:0] SW;
output [9:0] LEDR;
input [3:0] KEY;

wire reset_top = SW[9];
wire clock = ~KEY[0];
wire As_Right = ~KEY[3];  
wire muxout;

mux2to1 a0(.x(LEDR[0]), .y(LEDR[7]), .s(As_Right), .m(muxout));
rotate_register_model t0(.left(muxout), .right(LEDR[6]), .clk_reg(clock), .reset_reg(reset_top), .data_in(SW[7]), .parallel_load(~KEY[1]),.rotate_right(~KEY[2]),.out_Q(LEDR[7]));
rotate_register_model t1(.left(LEDR[7]), .right(LEDR[5]), .clk_reg(clock), .reset_reg(reset_top), .data_in(SW[6]), .parallel_load(~KEY[1]),.rotate_right(~KEY[2]),.out_Q(LEDR[6]));
rotate_register_model t2(.left(LEDR[6]), .right(LEDR[4]), .clk_reg(clock), .reset_reg(reset_top), .data_in(SW[5]), .parallel_load(~KEY[1]),.rotate_right(~KEY[2]),.out_Q(LEDR[5]));
rotate_register_model t3(.left(LEDR[5]), .right(LEDR[3]), .clk_reg(clock), .reset_reg(reset_top), .data_in(SW[4]), .parallel_load(~KEY[1]),.rotate_right(~KEY[2]),.out_Q(LEDR[4]));
rotate_register_model t4(.left(LEDR[4]), .right(LEDR[2]), .clk_reg(clock), .reset_reg(reset_top), .data_in(SW[3]), .parallel_load(~KEY[1]),.rotate_right(~KEY[2]),.out_Q(LEDR[3]));
rotate_register_model t5(.left(LEDR[3]), .right(LEDR[1]), .clk_reg(clock), .reset_reg(reset_top), .data_in(SW[2]), .parallel_load(~KEY[1]),.rotate_right(~KEY[2]),.out_Q(LEDR[2]));
rotate_register_model t6(.left(LEDR[2]), .right(LEDR[0]), .clk_reg(clock), .reset_reg(reset_top), .data_in(SW[1]), .parallel_load(~KEY[1]),.rotate_right(~KEY[2]),.out_Q(LEDR[1]));
rotate_register_model t7(.left(LEDR[1]), .right(LEDR[7]), .clk_reg(clock), .reset_reg(reset_top), .data_in(SW[0]), .parallel_load(~KEY[1]),.rotate_right(~KEY[2]),.out_Q(LEDR[0]));


endmodule

module rotate_register_model(left, right, clk_reg, reset_reg, data_in, parallel_load,rotate_right,out_Q);
input clk_reg, reset_reg;
input data_in;
input left, right;
input parallel_load, rotate_right;
output out_Q;
wire connect_mux2to1;
wire connect_dff;

mux2to1 m0(.x(right), .y(left), .s(rotate_right), .m(connect_mux2to1));
mux2to1 m1(.x(data_in), .y(connect_mux2to1), .s(parallel_load), .m(connect_dff));
register_model r0(.D(connect_dff), .clk(clk_reg), .reset(reset_reg), .Q(out_Q));

endmodule

module register_model(D, clk, reset, Q);
	input D, clk, reset;
	output Q;
	reg Q;
	always@(posedge clk)
		begin
			if(reset == 1'b1)
				begin
					Q <= 1'b0;
				end
			else
				begin
					Q <= D;
				end
		end
endmodule

module mux2to1(x, y, s, m);
    input x; //select 0
    input y; //select 1
    input s; //select signal
    output m; //output
  
    //assign m = s & y | ~s & x;
    // OR
    assign m = s ? y : x;

endmodule
